<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>画像にSAMPLE透かしを入れるアプリ</title>
    <style>
        #drop-zone {
            width: 100%;
            height: 300px;
            border: 2px dashed #ccc;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
        }
        #drop-zone.drag-over {
            background-color: #f0f0f0;
        }
        img {
            max-width: 100%;
            max-height: 300px;
        }
        canvas {
            display: none;
        }
    </style>
</head>
      <a href="https://kentaroabe.github.io/myapps/" style="margin: 20px; padding: 10px 20px; background-color: #6c757d; color: white; border: none; border-radius: 5px; text-decoration: none; display: inline-block;">アプリリストに戻る</a>

<body>
    <h1>画像にSAMPLE透かしを入れるアプリ</h1>
    <div id="drop-zone">ここに画像またはPDFをドラッグ＆ドロップしてください</div>
    <div id="preview"></div>
    <canvas id="canvas"></canvas>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <script>
        const dropZone = document.getElementById('drop-zone');
        const preview = document.getElementById('preview');
        const canvas = document.getElementById('canvas');

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('drag-over');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('drag-over');

            const files = e.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0];
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();

                    reader.onload = (event) => {
                        const img = new Image();
                        img.onload = () => {
                            addWatermark(img, file.name);
                        };
                        img.src = event.target.result;
                    };

                    reader.readAsDataURL(file);
                } else if (file.type === 'application/pdf') {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        const loadingTask = pdfjsLib.getDocument({ data: event.target.result });
                        loadingTask.promise.then((pdf) => {
                            for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
                                pdf.getPage(pageNum).then((page) => {
                                    const viewport = page.getViewport({ scale: 2 });
                                    canvas.width = viewport.width;
                                    canvas.height = viewport.height;
                                    const ctx = canvas.getContext('2d');

                                    const renderContext = {
                                        canvasContext: ctx,
                                        viewport: viewport
                                    };

                                    page.render(renderContext).promise.then(() => {
                                        const img = new Image();
                                        img.onload = () => {
                                            addWatermark(img, file.name.replace(/\.pdf$/, '') + `_page${pageNum}`);
                                        };
                                        img.src = canvas.toDataURL('image/png');
                                    });
                                });
                            }
                        });
                    };
                    reader.readAsArrayBuffer(file);
                }
            }
        });

        function addWatermark(img, originalFileName) {
            const ctx = canvas.getContext('2d');
            canvas.width = img.width;
            canvas.height = img.height;

            ctx.drawImage(img, 0, 0);
            ctx.font = 'bold 80px Arial';
            ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
            ctx.textAlign = 'center';
            ctx.translate(canvas.width / 2, canvas.height / 2);
            ctx.rotate(-Math.PI / 8);
            ctx.fillText('SAMPLE', 0, 0);

            const watermarkedDataUrl = canvas.toDataURL('image/png');
            showPreview(watermarkedDataUrl);
            downloadImage(watermarkedDataUrl, originalFileName);
        }

        function showPreview(dataUrl) {
            const imgElement = document.createElement('img');
            imgElement.src = dataUrl;
            preview.appendChild(imgElement);
        }

        function downloadImage(dataUrl, originalFileName) {
            const link = document.createElement('a');
            link.href = dataUrl;
            link.download = originalFileName.replace(/\.[^/.]+$/, '') + '_sample.png';
            link.click();
        }
    </script>
</body>
</html>
